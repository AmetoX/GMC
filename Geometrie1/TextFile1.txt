Seminar 1
-Aria triunghiului format din trei puncte: ( A(x1,y1,1) B(x2,y2,1) C(0,0,1) )
	-Aabc=1/2*|x1 y1 1| = 1/2*(x1y2-x2y1)
			  |x2 y2 1|
			  |0  0  1|
	-Valoarea unui determinant "<" :  A < B <=>x1y2 <= x2y1
-Tehnica 3-Suma.

(d1) a1x+b1y+c=0
(d2) a2x+b2y+c=0
	det=|a1 b1| != 0
		|a2 b2|

	x=  |c1 b1| 
		|c2 b2|
		supra det

	y=	|a1 c1| 
		|a2 c2|
		supra det
		
-SortedList, TreeNode (colectii/clase).

Tema 3 :
-Se da o multime de puncte in plan , se cere un cerc de arie minima care
sa contina toate punctele in interior.
	-minimal enclosing circle.
	(solutia/metoda grosiera)
Optional:
	-variante optimizate a acestor probleme.


Determinant de gradul 3:
a11 a12 a13
b11 b12 b13
c11 c12 c13


a11 a12 a13
b11 b12 b13
c11 c12 c13
a11 a12 a13
b12 b12 b13 

det:a11b12c13+b11c12a13+c11a12b13-
b11a12c13-a11c12b13-c11b12a13

x1 y1 1
x2 y2 1
x3 y3 1
x1 y1 1
x2 y2 1

det:x1y2+x2y3+x3y1-x2y1-x1y3-x3y2



-Rezolvare problema triunghi 1.0:

if (i >= 2)
                {
                    float arie = (ariiX[i - 2] * ariiY[i-1] + ariiX[i-1]*ariiY[i] + ariiX[i]*ariiY[i-2] - ariiX[i-1] 
                        * ariiY[i-2] - ariiX[i-2]*ariiY[i] - ariiX[i]*ariiY[i-1])/2;
                    if (arie < 0)
                        arie *= -1;
                    
                    listBox1.Items.Add(arie.ToString());
                    if (arie < arie2)
                    {
                        x1 = ariiX[i - 2];
                        y1 = ariiY[i - 2];
                        x2 = ariiX[i - 1];
                        y2 = ariiY[i - 1];
                        x3 = ariiX[i];
                        y3 = ariiY[i];
                    }
                    arie2 = arie;
                }
--------------------------------------

                    arie = (ariiX[i - 2] * ariiY[i - 1] + ariiX[i - 1] * ariiY[i] + ariiX[i] * ariiY[i - 2] - ariiX[i]
                        * ariiY[i - 1] - ariiX[i - 2] * ariiY[i] - ariiX[i - 1] * ariiY[i - 2]);
                    if (arie < 0)
                        arie *= -1;
                    arie /= 2;

                    arii[i] = arie;
                    for (int j = 2; j < arii.Length; j++)
                    {
                        if (arie <= arii[j])
                        {
                            x1 = ariiX[i - 2];
                            y1 = ariiY[i - 2];
                            x2 = ariiX[i - 1];
                            y2 = ariiY[i - 1];
                            x3 = ariiX[i];
                            y3 = ariiY[i];

                        }
                    }
Cerc v1

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
//Problema 3 (cerc)
namespace Geometrie3
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        private void Form1_Load(object sender, EventArgs e)
        {

        }
        private void panel1_Paint(object sender, PaintEventArgs e)
        {
            Graphics g = e.Graphics;
            Random random = new Random();
            Pen p = new Pen(Color.Blue, 4);
            Pen cr = new Pen(Color.Red, 4);
            Pen rz = new Pen(Color.Green, 3);
            float x = 0, y = 0, one = 0, two = 0;
            float[] X = new float[9];
            float[] Y = new float[9];           

            for (int i = 0; i < 9; i++)
            {
                x = random.Next(panel1.Width - 150);
                y = random.Next(panel1.Height - 150);
                X[i] = x;
                Y[i] = y;
                g.DrawEllipse(cr, x, y, 2, 2);
                if (x > one)
                    one = x;
                if (y > two)
                    two = y;
            }

            //int punct = random.Next(0, 9);
            //g.DrawEllipse(p, X[punct], Y[punct], 3, 3);
            float distanta = 0;
            /*
            for (int i = 0; i < 9; i++)
            {
                float dis = (float)Math.Sqrt(Math.Pow(X[i] - X[punct], 2) +
                                Math.Pow(Y[i] - Y[punct], 2));
                if (dis > distanta)
                {
                    distanta = dis;                   
                }
            }
            */
            int x1 = 0;
            int y1 = 0;
            for(int i = 0; i < 8; i++)
            {
                for(int j = 1; j < 9; j++)
                {
                    float dis = (float)Math.Sqrt(Math.Pow(X[i] - X[j], 2) +
                Math.Pow(Y[i] - Y[j], 2));
                    if (dis >= distanta)
                    {
                        distanta = dis;
                        x1 = i;
                        y1 = i;
                    }
                }
            }

            g.DrawEllipse(p, X[x1], Y[y1], 3, 3);
            g.DrawEllipse(rz,X[x1]-distanta, Y[y1]-distanta,distanta + distanta+10, distanta + distanta+10);
            //g.DrawEllipse(pen, centerX - radius, centerY - radius,radius + radius, radius + radius);
            //points = points.OrderBy(item => item.X).ThenBy(item => item.Y).ToList();
        }
    }
}

2.0---

x1-------------------------x2
           dis
dis/=2
while(dis==actualdis)
x1-----------randompct
    actualdis
    randompct = j

random---------x2
    final dis
    ==> cercul

Invelitoare convexa:
- sa aflam cel mai de jos punct
-ctangenta: math.atan(y1-y2)/(x2-x1)

algoritm jarvis (S) este    
// S este setul de puncte 
// P va fi setul de puncte care formează carena convexă. Dimensiunea setului final este i. pointOnHull = cel mai stâng punct din S 
// care este garantat să facă parte din CH (S) i: = 0 repeta       
P [i]: = punct final Punct final: = S [0] 
// punct final final pentru o margine candidată pe corp pentru j de la 0 la | S | do            
// punct final == pointOnHull este un caz rar și se poate întâmpla numai atunci 
când j == 1 și încă nu a fost stabilit un punct final mai bun pentru buclă dacă 
(punctul final == pointOnHull) sau (S [j] este la stânga liniei de la P [i] la punctul final) atunci                punct final: = S [j] // a găsit o viraj mai mare la stânga, actualizați punctul final i: = i + 1 punctOnHull = punct final pana cand punct final = P [0] // înfășurat până la primul punct al corpului